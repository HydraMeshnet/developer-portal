///###TS_STEP_1
// Import the necessary modules from our SDK
import { Crypto, Layer1, Layer2, Network, NetworkConfig } from '@internet-of-people/sdk';
///###TS_STEP_1

///###TS_STEP_2
// Configure the network and account settings
const network = Network.Testnet;
const unlockPassword = 'correct horse battery staple';
const gasVault = Crypto.Vault.create(Crypto.Seed.demoPhrase(), '', unlockPassword);

// Initialize the transaction sender's vault to send Layer-1 transactions 
const parameters = new Crypto.HydraParameters(
  Crypto.Coin.Hydra.Testnet,
  0
);
Crypto.HydraPlugin.init(gasVault, unlockPassword, parameters);

// Get the address and the private interface from the vault's hydra plugin
const hydraPlugin = Crypto.HydraPlugin.get(gasVault, parameters);
const senderPrivate = hydraPlugin.priv(unlockPassword);
const senderAddress = hydraPlugin.pub.key(0).address;
///###TS_STEP_2

///###TS_STEP_3
// YOU HAVE TO SAVE THE PASSPHRASE SECURELY!
const phrase = new Crypto.Bip39('en').generate().phrase;

// Create a new vault based on the BIP39 passphrase, password and unlock password
const vault = Crypto.Vault.create(
  phrase,
  '',                   // The 25th word of the passphrase
  unlockPassword,       // Encrypts the master seed
);
///###TS_STEP_3

///###TS_STEP_4
// Initialize the Morpheus plugin on your personal vault:
Crypto.MorpheusPlugin.init(vault, unlockPassword);
const morpheusPlugin = Crypto.MorpheusPlugin.get(vault);

// Select the first DID
const did = morpheusPlugin.pub.personas.did(0);
console.log("Using DID: ", did.toString());
///###TS_STEP_4

if(!did) {
    throw new Error('DID is null');
}

///###TS_STEP_5
// Acquire the default key
const keyId = did.defaultKeyId();

// The contract details
const contractStr = "A long legal document, e.g. a contract with all details";
const contractBytes = new Uint8Array(Buffer.from(contractStr));

// Acquire the plugin's private interface that provides you the sign interface
const morpheusPrivate = morpheusPlugin.priv(unlockPassword); 

// The signed contract, which you need to store securely!
const signedContract = morpheusPrivate.signDidOperations(keyId, contractBytes);
console.log("Signed contract:", JSON.stringify({
    content: Buffer.from(signedContract.content).toString('utf8'),
    publicKey: signedContract.publicKey.toString(),
    signature: signedContract.signature.toString(),
}, null, 2));
///###TS_STEP_5

///###TS_STEP_6
// The beforeProof (a.k.a. Proof of Existence) is generated by hashing the signed contract
const beforeProof = Crypto.digestJson(signedContract);
console.log("Proof of Existence:", beforeProof);
///###TS_STEP_6

if(!beforeProof) {
    throw new Error('beforeProof is null');
}

(async () => {
///###TS_STEP_7
// Create the Layer-2 data structure
const morpheusBuilder = new Crypto.MorpheusAssetBuilder()
morpheusBuilder.addRegisterBeforeProof(beforeProof);
const morpheusAsset = morpheusBuilder.build();

// Initialize the Layer-1 API
const layer1Api = await Layer1.createApi(NetworkConfig.fromNetwork(network));

// Send the transaction on Layer-1
const txId = await layer1Api.sendMorpheusTx(senderAddress, morpheusAsset, senderPrivate);
console.log("Transaction ID: ", txId);
///###TS_STEP_7

///###TS_STEP_8
// Block confirmation time
const waitUntil12Sec = (): Promise<void> => {
    return new Promise((resolve) => {
        return setTimeout(resolve, 12*1000);
    });
};
await waitUntil12Sec();

// Layer-1 transaction must be confirmed
let txStatus = await layer1Api.getTxnStatus(txId);
console.log("Tx status:", txStatus.get());

// Initialize the Layer-2 Morpheus API to query the transaction status
const layer2MorpheusApi = await Layer2.createMorpheusApi(NetworkConfig.fromNetwork(network));
let ssiTxStatus = await layer2MorpheusApi.getTxnStatus(txId);
console.log("SSI Tx status:", ssiTxStatus.get());
///###TS_STEP_8

///###TS_STEP_9
// We assume that signedContract is in scope and available
const expectedContentId = Crypto.digestJson(signedContract);
///###TS_STEP_9

///###TS_STEP_10
// Query the blockchain for the hash of the signed contract (Proof of Existence)
const history = await layer2MorpheusApi.getBeforeProofHistory(expectedContentId);
console.log("Proof history:", history);
///###TS_STEP_10

if(history.contentId !== expectedContentId) {
    throw new Error('Content Id does not match');
}

})().catch((e)=>{
    process.stderr.write(e.message);
    process.exit(1);
});
